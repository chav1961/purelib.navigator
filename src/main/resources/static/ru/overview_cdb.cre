= Пакет purelib.cdb. Общий обзор

Классы пакета [[/doc/chav1961.purelib/chav1961/purelib/cdb/package-summary.html|purelib.cdb]] обеспечивают работу с узлами синтаксического дерева. Этот пакет, в первую очерель, используется самой библиотекой PL (например, в макроассемблере). Основной класс, определенный в этом пакете - класс [[/doc/chav1961.purelib/chav1961/purelib/cdb/SyntaxNode.html|SyntaxNode]]. Он содержит:

* тип узла синтаксического дерева (произвольная нумерация)
* строку и позиция в исходном файле, к которй относится данный узел синтаксического дерева
* ссылку на родительский узел синтаксического дерева
* два поля (типа **long** и **Object**) для хранения дополнительной информации, связанной с данным деревом
* массив дочерних узлов вершины

Как паказала практика применения этого класса, ничего сверх имеющихся полей в реальной жизни от него не потребовалось.

Класс [[/doc/chav1961.purelib/chav1961/purelib/cdb/SyntaxNodeUtils.html|SyntaxNodeUtils]], определенный в этом же пакете, поддерживает операции обхода синтаксического дерева (методы **walkDown(...)** и **walkUp(...)**). Алгоритм работы методов в точности соответствует описанному [[./overview_enumerations.cre#Нумерация NodeEnterMode и ContinueMode|здесь]]

== Практика использования SyntaxNode
Поскольку в языке Java параметры вызовов методов передаются только по значению, при построении синтаксического дерева требуется применять определенную технику программирования. Сам класс [[/doc/chav1961.purelib/chav1961/purelib/cdb/SyntaxNode.html|SyntaxNode]] является mutable-классом, поскольку все его поля, во-первых, **не финальные**, и, во-вторых, не имеют ограничений по области видимости (**public**). Типичный шаблон при работе с классом [[/doc/chav1961.purelib/chav1961/purelib/cdb/SyntaxNode.html|SyntaxNode]] выглядит следующим образом:

{{{void someMethod(..., SyntaxNode node, ...) {
	// TODO:...
	SyntaxNode 	childNode1 = (SyntaxNode)node.clone(), childNode2 = (SyntaxNode)node.clone();
	// TODO:...
	someMethod1(...,childNode1,...);
	someMethod2(...,childNode2,...);
	node.type = ...;
	node.children = new SyntaxNode[]{childNode1,childNode2};
	// TODO:...
} }}}

Обратите внимание - полученную через заголовок метода инстанцию узла мы исправляем так, как считаем нужным, а дочерние узлы для нее создаем не с помощью конструктора класса SyntaxNode, а вызовом метода **clone()** - этот способ создания инстанций более быстрый, нежели создание узла через конструктор класса.
