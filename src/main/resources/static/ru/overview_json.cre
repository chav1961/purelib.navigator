= Пакет purelib.json и его подпакеты. Общий обзор

Классы пакета [[/doc/chav1961.purelib/chav1961/purelib/json/package-summary.html|purelib.json]] и его подпакетов предназначены для работы с JSON-форматом ([[https://tools.ietf.org/html/rfc7159|RFC 7159]]). Их можно разделить на несколько групп:

* классы, предназначенные для низкоуровневой работы с JSON форматом
* классы, предназначенные для высокоуровневой работы с JSON форматом

Рассмотрим подробнее каждую из упомянутых групп. 

== Низкоуровневая работа с JSON

Для поддержки низкоуровневой работы с JSON в пакете [[/doc/chav1961.purelib/chav1961/purelib/json/package-summary.html|purelib.json]] имеется три класса:

* класс [[/doc/chav1961.purelib/chav1961/purelib/json/JsonNode.html|JsonNode]], предназначенный для хранения дерева JSON (по аналогии с DOM XML)
* класс [[/doc/chav1961.purelib/chav1961/purelib/json/JsonSaxDeserializerFactory.html|JsonSaxDeserializerFactory]], преднаначенный для обработки входного JSON-потока в стиле XML SAX совместно с классом [[/doc/chav1961.purelib/chav1961/purelib/streams/JsonSaxParser.html|JsonSaxParser]]
* класс [[/doc/chav1961.purelib/chav1961/purelib/json/JsonUtils.html|JsonUtils]], обеспечивающий загрузку и выгрузку дерева JSON с помощью потоков ввода-вывода, а также обход дерева JSON (в том числе с применением механизма, аналогичного XPath XML)

Указанные классы не занимаются собственно разбором и формированием внешнего представления JSON, пользуясь вместо этого классами [[/doc/chav1961.purelib/chav1961/purelib/streams/JsonSaxParser.html|JsonSaxParser]] , [[/doc/chav1961.purelib/chav1961/purelib/streams/JsonStaxParser.html|JsonStaxParser]] и [[/doc/chav1961.purelib/chav1961/purelib/streams/JsonStaxPrinter.html|JsonStaxPrinter]] из пакета [[/doc/chav1961.purelib/chav1961/purelib/streams/package-summary.html|purelib.streams]].

Класс [[/doc/chav1961.purelib/chav1961/purelib/json/JsonNode.html|JsonNode]] представляет собой узел определенного типа в дереве JSON. Типы узлов определены в нумерации [[/doc/chav1961.purelib/chav1961/purelib/json/interfaces/JsonNodeType.html|JsonNodeType]] из пакета [[/doc/chav1961.purelib/chav1961/purelib/json/interfaces/package-summary.html|purelib.json.interfaces]], и могут быть:

* целым числом
* вещественноым числом
* строкой
* булевым значением (**true** или **false**)
* пустой вершиной (**null**)
* массивом узлов дерева
* именованной структурой с набором полей, каждое из которых характеризуется уникальным именем и связанным с ним узлом-значением

Управление деревом JSON осуществляется "вручную" (создание, добавление, изменение и удаление элементов дерева, а также перестройка структуры дерева). Класс [[/doc/chav1961.purelib/chav1961/purelib/json/JsonUtils.html|JsonUtils]] автоматизирует три наиболее часто используемые операции при работе с JSON, а именно:

* преобразование JSON из текстовой формы представления в дерево JSON
* преобразование дерева JSON в текстовую форму представления
* обход дерева JSON

Для упрощения процесса обхода дерева JSON класс [[/doc/chav1961.purelib/chav1961/purelib/json/JsonUtils.html|JsonUtils]] поддерживает также построение **фильтра** для процедуры обхода. Фильтр является аналогом механизма XPath XML и позволяет задавать критерии фильтрации обхода дерева. Например, фильтр:

{{{/*1/[has i % 2 = 0]/~**/y#../x in 10..20 && ../z = '{"name":"var","value":12.5}'}}}

позволяет добраться до вершины дерева, которая начинается в поле структуры с именем, заканчивающися на единицу, под которой "висит" массив, в четных элементах которого где-нибудь внизу присутствует поле "y", при этом в этой же вершине должно быть поле "x" с целочисленным значением в диапазоне от 10 до 20, а также поле "z", содержимое которого в точности соответствует JSON вида **{"name":"var","value":12.5}**. Более подробно про использование фильтра для JSON можно прочитать [[./learning/learning_json_1.cre|здесь]]

== Высокоуровневая работа с JSON

Высокоуровневую работу с JSON обеспечивает класс [[/doc/chav1961.purelib/chav1961/purelib/json/JsonSerializer.html|JsonSerializer]], позволяющий сериализовать классы Java в формат JSON и десериализовать их обратно. Сериализуемый/десериализуемый класс должен содержать публичный конструктор по умолчанию, либо реализовывать интерфейс [[https://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html|Cloneable]], а также реализовывать интерфейс [[https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html|Serializable]] либо [[https://docs.oracle.com/javase/8/docs/api/java/io/Externalizable.html|Externalizable]], если требуется сериализация его непубличных полей. Модификатор **transient** учитывается при выполнении сериализации. Высокоуровневую работу обеспечивает также класс [[/doc/chav1961.purelib/chav1961/purelib/json/JsonRPCFactory.html|JsonRPCFactory]], который по описанию какого-либо интерфейса строит клиентскую и серверную часть JSON сериализатора/десериализатора для применения этого интерфейса в [[https://ru.wikipedia.org/wiki/%D0%A3%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9_%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2_%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80|RPC]].